Coeditor help text

 The Coeditor is designed to generate edit operation sequences automatically
 and apply operations from OT functions.  There are four main sections of the
 editor.  The top line shows the program version, the current filename being
 edited, and whether or not the file has been modified.  Next is the main
 editor window showing the file being edited.  The status line is the third
 line from the bottom and shows important messages.  The bottom two lines
 show the most commonly used shortcuts in the editor.
 
 The notation for shortcuts is as follows: Control-key sequences are notated
 with a caret (^) symbol and can be entered by using the Control (Ctrl) key.

^G            Display this help text
^X            Close the current file buffer / Exit from Coeditor
^W            Write the current file to disk
^C            Display the position of the cursor

^L            Refresh screen
^U            Synchronize queued sending operations
^K            Apply queued received operations
^S            Synchronize all queued operations immediately

^T            Go to line and column number
^O            Go to file offset
^Y            Go to previous screen
^V            Go to next screen

^P            Go to previous line
^N            Go to next line
^A            Go to beginning of current line
^E            Go to end of current line

^F            Go forward one character
^B            Go back on character
^D            Alternative Delete key
^H            Alternative Backspace key

^Z            Suspend the editor
^R            Troggle edit mode and view mode


Coeditor command line arguments

 Invoke Coeditor without any arguments will create a new buf, and you can save
 your modifications later.  If you provide a file name, Coeditor will check
 file existence and permissions.  If file does not exist, Coeditor will create
 it while saving. 

 Coeditor supports 10 options up to now:

-c server-address        Establish a connection with Jupiter server
-t sec(float)            deliver to OT (delay time before sending)
-T sec(float)            deliver to OT (delay time before receiving)
-w                       CLI command also writes OP ouput pipe (default not)
-p                       OP ouput using (row, col) (default file offset)
-o                       Invoke OT program manually (default automatically)
-l                       Start CLI thread (default not)
-d                       Switch on debug mode (default not)
-f                       Disable local operation feedback (not suggested)
-F                       Disable server transmission feedback (suggested)


Coeditor opened files description

 Coeditor creates several files.  They are named with ".coeditor.[FILENAME].
 [PID]." prefix.  You need invoke program with "-old" arguments to get all
 entries of below files.

 SUFFIX explanation: 
 [PW] for pipe write end, [PR] for pipe read end, [F] for regular file.
 You should open PW in write-only mode and PR vice versa.

[SUFFIX]                 [TYPE]  [DESCRIPTION]
cli                      PW      Command del, ins, save and print interface.
debug                    F       Standard error output.
local.op.input           PW      Like cli, but accepts raw input data.
local.op.input.feedback  PR      Indicate whether local.op.input applied.
local.op.output          PR      Local operation sequences.
server.input             PW      Write raw input data to server.
server.input.feedback    PR      Indicate whether server.input sent to server.
server.output            PR      Server output


CLI command format

 Generally, UPPERCASE uses offset while lowercase uses (row, col) to address.

D offset                 Delete character at offset
I offset char            Insert character at offset

d row col                Delete charater at (row, col)
i row col char           Insert charater at (row, col)

p [lineno, [n]]          Print n lines from lineno
s [filename]             Save to filename

u                        Upload local operations immediately
r                        Receive server operations immediately
l                        Synchronize all operations immediately


Text format

 A text file looks like this:

    1  2  3  4  5  6  7  8      [LINESIZE]
 1  a  b  c  d  e  \n               5
 2  f  g  h  i  j  \n               5
 3  k  l  m  n  o  p  q  \n         7
 4                                  0

 For (row, col) format, addressing range for a line is [1, linesize+1]. Note
 that newline character ('\n') is the end of the line. So you cannot delete
 at linesize+1 of last line (line 4), but you can insert at that position.

 The last line is called break line if it hasn't newline charater. (No line 4 
 in this example).  You can edit the last newline character in Coeditor.

 For offset format, addressing range is [0, filesize].  You can insert but
 cannot delete at filesize.


OT file descriptor convention and command line arguments

 OT is an abnormal program.  I/O files are not delivered from command line but
 from file descriptors.  You should use special shell redirection rules.  For
 input files, n<[FILE], and for output files, n>[FILE]. (n is file descriptor)

File Desc    I/O    Intention
0            I      Local op input (generated by coeditor)
1            O      Local op output (received from server and has OTed)
2            O      Standard error ouput
3            I      Receive messages from server
4            O      Write messages to server
5            I      Local op feedback
6            I      Server transmission feedback (obsolescent)

 Command line arguments:

-t sec(float)       Delay before sending (0 no delay, <0 no send, >0 time)
-T sec(float)       Delay before receiving (same as -t)
-f                  Not to check local op feedback
-F                  Not to check server transmission feedback


Feedback details

 Coeditor will write an integer to feedback fifos to indicate whether coeditor
 will output data to the fifo or not.  If the integer is 0, then feedback is
 disabled.


Local I/O format

 A local I/O is 12 bytes in total.  For details, please see 'include/op.h'
 file.  The feedback end will return the same data if it is successfully
 applied, otherwise, the operation field is minus. (if feedback enabled)


Server I/O format

 A server I/O is 16 byte in total.  For details, please see 'include/op.h'
 file.  The feedback end is the same as Local I/O.
