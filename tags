!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUILD_DIRS	Makefile	/^BUILD_DIRS = ${DIRS}$/;"	m
Boolean	include/inet_sockets.h	/^typedef enum { FALSE, TRUE } Boolean;$/;"	t	typeref:enum:__anon4
CH_DELETE	include/op.h	/^    CH_DELETE = 'D', CH_INSERT = 'I'$/;"	e	enum:__anon3
CH_INSERT	include/op.h	/^    CH_DELETE = 'D', CH_INSERT = 'I'$/;"	e	enum:__anon3
CLI_INPUT_SUFFIX	include/init.h	17;"	d
CONTENT_LINES	lib/front_end_curses.cpp	39;"	d	file:
DEBUG	include/error.h	15;"	d
DEBUG_FILE_SUFFIX	include/init.h	16;"	d
DEFAULT_PS	lib/front_end_cli.cpp	22;"	d	file:
DELETE	include/op.h	/^    DELETE = 'd', INSERT = 'i', PRINT = 'p', SAVE = 's',$/;"	e	enum:__anon3
DIRS	Makefile	/^DIRS = lib server src$/;"	m
EXE	server/Makefile	/^EXE = ..\/jupiter-server$/;"	m
EXE	src/Makefile	/^EXE = ..\/coeditor$/;"	m
EXE_STATIC	src/Makefile	/^EXE_STATIC = ..\/coeditor-static$/;"	m
EXIT_ERROR	include/error.h	51;"	d
FALSE	include/inet_sockets.h	/^typedef enum { FALSE, TRUE } Boolean;$/;"	e	enum:__anon4
FALSE	include/inet_sockets.h	29;"	d
FOLD_PRE_NUM	lib/front_end_curses.cpp	43;"	d	file:
FROM_SERVER_SUFFIX	include/init.h	23;"	d
FRONT_END_CLI_LIB	lib/Makefile	/^FRONT_END_CLI_LIB = libfrontend.so.1.0.1$/;"	m
FRONT_END_CURSES_LIB	lib/Makefile	/^FRONT_END_CURSES_LIB = libfrontend.so.1.1.1$/;"	m
FRONT_END_CXXFLAGS	lib/Makefile	/^FRONT_END_CXXFLAGS := ${CXXFLAGS} -shared \\$/;"	m
FRONT_END_DEFAULT	lib/Makefile	/^FRONT_END_DEFAULT = ${FRONT_END_CURSES_LIB}$/;"	m
FRONT_END_STATIC_DEFAULT	lib/Makefile	/^FRONT_END_STATIC_DEFAULT = libfrontend.a.1.1.1$/;"	m
GP_OFFSET	lib/front_end_curses.cpp	/^enum {GP_POS, GP_OFFSET};$/;"	e	enum:__anon1	file:
GP_POS	lib/front_end_curses.cpp	/^enum {GP_POS, GP_OFFSET};$/;"	e	enum:__anon1	file:
HALF_HEIGHT	lib/front_end_curses.cpp	40;"	d	file:
INET_CXXFLAGS	lib/Makefile	/^INET_CXXFLAGS := ${CXXFLAGS} -shared \\$/;"	m
INET_SOCKETS_H	include/inet_sockets.h	18;"	d
INSERT	include/op.h	/^    DELETE = 'd', INSERT = 'i', PRINT = 'p', SAVE = 's',$/;"	e	enum:__anon3
INTERP	lib/front_end_v1.cpp	19;"	d	file:
INTERP	lib/front_end_v1.cpp	21;"	d	file:
INTERP	lib/front_end_v2.cpp	27;"	d	file:
IS_ADDR_STR_LEN	include/inet_sockets.h	43;"	d
LIBS	lib/Makefile	/^LIBS = libfrontend.so.1 libinetsockets.so.1$/;"	m
LIBS	src/Makefile	/^LIBS = $(wildcard ${LIB_DIR}\/*.so)$/;"	m
LIBS_STATIC	src/Makefile	/^LIBS_STATIC = $(wildcard ${LIB_DIR}\/*.a)$/;"	m
LIB_DIR	src/Makefile	/^LIB_DIR = ..\/lib$/;"	m
LOCK_FILE_SUFFIX	include/init.h	24;"	d
MIN_COL	lib/front_end_curses.cpp	33;"	d	file:
MIN_ROW	lib/front_end_curses.cpp	34;"	d	file:
NDEBUG	include/error.h	18;"	d
NDEBUG	include/error.h	21;"	d
NOERR	include/error.h	31;"	d
OP_INPUT_FEEDBACK_SUFFIX	include/init.h	20;"	d
OP_INPUT_SUFFIX	include/init.h	19;"	d
OP_OUTPUT_SUFFIX	include/init.h	18;"	d
OUT_FILE_PREFIX	include/init.h	15;"	d
PAD_SIZE	lib/front_end_v2.cpp	55;"	d	file:
PRINT	include/op.h	/^    DELETE = 'd', INSERT = 'i', PRINT = 'p', SAVE = 's',$/;"	e	enum:__anon3
PROMPT_ERROR	include/error.h	45;"	d
PROMPT_ERROR_EN	include/error.h	57;"	d
RDWRN_H	include/rdwrn.h	18;"	d
RD_ALL	lib/front_end_curses.cpp	611;"	d	file:
RD_CONTENT	lib/front_end_curses.cpp	612;"	d	file:
RD_MASK	lib/front_end_curses.cpp	616;"	d	file:
RD_STBAR	lib/front_end_curses.cpp	614;"	d	file:
RD_STMSG	lib/front_end_curses.cpp	615;"	d	file:
RD_TITLE	lib/front_end_curses.cpp	613;"	d	file:
SAVE	include/op.h	/^    DELETE = 'd', INSERT = 'i', PRINT = 'p', SAVE = 's',$/;"	e	enum:__anon3
SM_IMMEDIATE	lib/front_end_curses.cpp	559;"	d	file:
SM_MASK	lib/front_end_curses.cpp	562;"	d	file:
SM_ONECHAR	lib/front_end_curses.cpp	560;"	d	file:
SM_STRING	lib/front_end_curses.cpp	561;"	d	file:
SRC	lib/Makefile	/^SRC = $(wildcard *.cpp)$/;"	m
SRC	server/Makefile	/^SRC = $(wildcard *.cpp)$/;"	m
SRC	src/Makefile	/^SRC = $(wildcard *.cpp)$/;"	m
SRC_NO_MAIN	src/Makefile	/^SRC_NO_MAIN = $(shell find . -type f -name '*.cpp' ! -name main.cpp ! -name init.cpp)$/;"	m
STATUS_LINES	lib/front_end_curses.cpp	38;"	d	file:
TITLE_LINES	lib/front_end_curses.cpp	37;"	d	file:
TO_SERVER_FEEDBACK_SUFFIX	include/init.h	22;"	d
TO_SERVER_SUFFIX	include/init.h	21;"	d
TRASH_FILE	src/init.cpp	33;"	d	file:
TRUE	include/inet_sockets.h	/^typedef enum { FALSE, TRUE } Boolean;$/;"	e	enum:__anon4
TRUE	include/inet_sockets.h	25;"	d
VERSION	lib/front_end_curses.cpp	26;"	d	file:
_BSD_SOURCE	lib/inet_sockets.cpp	17;"	d	file:
_COMMON_H	include/common.h	10;"	d
_ERROR_H	include/error.h	10;"	d
_FRONT_END_H	include/front_end.h	10;"	d
_GNU_SOURCE	include/common.h	23;"	d
_INIT_H	include/init.h	10;"	d
_OP_H	include/op.h	10;"	d
_TEXT_H	include/text.h	10;"	d
_TEXT_MUTEX_H	include/text_mutex.h	10;"	d
_err	src/error.cpp	/^void _err(prompt_t &errmsg, bool term, int lineno, const char *file) {$/;"	f
another_name_msgs	lib/front_end_curses.cpp	/^static status_t another_name_msgs = {$/;"	v	file:
author	lib/front_end_v2.cpp	/^static char author[PAD_SIZE] = {0};$/;"	v	file:
backupFile	lib/front_end_curses.cpp	/^prompt_t backupFile(const string &n = "") {$/;"	f
banner	lib/front_end_v2.cpp	/^const char *banner[] = {$/;"	v
buf_changed	include/front_end.h	/^extern "C" volatile int buf_changed;$/;"	v
buf_changed	lib/front_end_v1.cpp	/^volatile int buf_changed = 0;$/;"	v
buf_changed	lib/front_end_v2.cpp	/^volatile int buf_changed = 0;$/;"	v
calCurLine	lib/front_end_curses.cpp	/^string calCurLine() {$/;"	f
cancelled	lib/front_end_curses.cpp	/^static status_t cancelled = { "Cancelled" };$/;"	v	file:
char_offset	include/op.h	/^        uint64_t char_offset;$/;"	m	union:op_t::__anon2
checkFileLock	src/init.cpp	/^int checkFileLock() {$/;"	f
clearModified	include/text.h	/^    void clearModified() {$/;"	f	class:textOp
cli_input_fifo_name	src/init.cpp	/^string cli_input_fifo_name;$/;"	v
client	include/op.h	/^    int client;$/;"	m	struct:state_t
control	lib/front_end_curses.cpp	/^void control() {$/;"	f
copyFileToMem	lib/front_end_curses.cpp	/^prompt_t copyFileToMem(const string &filename, char *&p, off_t &sz) {$/;"	f
creatCliInputFifo	src/init.cpp	/^int creatCliInputFifo() {$/;"	f
creatOpInputFeedbackFifo	src/init.cpp	/^int creatOpInputFeedbackFifo() {$/;"	f
creatOpInputFifo	src/init.cpp	/^int creatOpInputFifo() {$/;"	f
creatOpOutputFifo	src/init.cpp	/^int creatOpOutputFifo() {$/;"	f
creatServerInputFeedbackFifo	src/init.cpp	/^int creatServerInputFeedbackFifo() {$/;"	f
creatServerInputFifo	src/init.cpp	/^int creatServerInputFifo() {$/;"	f
creatServerOuputFifo	src/init.cpp	/^int creatServerOuputFifo() {$/;"	f
cur_char	include/text.h	/^    uint64_t cur_char;$/;"	m	class:textOp
cur_line_it	include/text.h	/^    file_t::iterator cur_line_it;$/;"	m	class:textOp
cur_line_no	include/text.h	/^    int cur_line_no;$/;"	m	class:textOp
cur_line_size	lib/front_end_curses.cpp	/^int cur_line_size = 0;$/;"	v
cur_pos	lib/front_end_curses.cpp	/^pos_t cur_pos = {1, 1};$/;"	v
data	include/op.h	/^    int data;$/;"	m	struct:op_t
debug_output_file_name	src/init.cpp	/^string debug_output_file_name;$/;"	v
deleteChar	src/text.cpp	/^prompt_t textOp::deleteChar(pos_t pos, char *c) {$/;"	f	class:textOp
deleteChar	src/text_mutex.cpp	/^prompt_t textOpMutex::deleteChar(pos_t pos, char *c) {$/;"	f	class:textOpMutex
deleteCharAt	src/text.cpp	/^prompt_t textOp::deleteCharAt(uint64_t off, char *c) {$/;"	f	class:textOp
deleteCharAt	src/text_mutex.cpp	/^prompt_t textOpMutex::deleteCharAt(uint64_t off, char *c) {$/;"	f	class:textOpMutex
deleteOutFile	src/init.cpp	/^void deleteOutFile(const string &name, const string &ignore = "") {$/;"	f
drawStatusBar	lib/front_end_curses.cpp	/^status_t *drawStatusBar(status_t &msgs, int offset = 0) {$/;"	f
drawStatusMsg	lib/front_end_curses.cpp	/^string drawStatusMsg(status_t *msgs = NULL, int type = SM_IMMEDIATE) {$/;"	f
drawStatusMsgImm	lib/front_end_curses.cpp	/^void drawStatusMsgImm(const char *msg) {$/;"	f
drawStatusMsgInput	lib/front_end_curses.cpp	/^int drawStatusMsgInput(int ch, int x, string *s = NULL) {$/;"	f
drawStatusMsgOneChar	lib/front_end_curses.cpp	/^int drawStatusMsgOneChar(status_t &msgs) {$/;"	f
drawStatusMsgPrompt	lib/front_end_curses.cpp	/^void drawStatusMsgPrompt(const char *msg) {$/;"	f
drawStatusMsgString	lib/front_end_curses.cpp	/^string drawStatusMsgString(status_t &msgs) {$/;"	f
edit_dir_fd	src/init.cpp	/^static int edit_dir_fd = -1;$/;"	v	file:
edit_file	include/text.h	/^    file_t edit_file;$/;"	m	class:textOp
edit_file	src/init.cpp	/^textOp *edit_file;$/;"	v
editing_file	lib/front_end_curses.cpp	/^textOp *editing_file;$/;"	v
endCurses	lib/front_end_curses.cpp	/^void __attribute__ ((destructor)) endCurses() {$/;"	f
errExit	include/error.h	42;"	d
errMsg	include/error.h	43;"	d
exitEditor	lib/front_end_curses.cpp	/^int exitEditor() {$/;"	f
exit_msgs	lib/front_end_curses.cpp	/^static status_t exit_msgs = {$/;"	v	file:
fifoInputCli_thread	lib/front_end_v2.cpp	/^static void *fifoInputCli_thread(void *arg) {$/;"	f	file:
file_name	include/text.h	/^    string file_name;$/;"	m	class:textOp
file_t	include/text.h	/^typedef list<linestruct> file_t;$/;"	t
from_server_fifo_name	src/init.cpp	/^string from_server_fifo_name;$/;"	v
frontEnd	lib/front_end_v1.cpp	/^void frontEnd(textOp &file) {$/;"	f
frontEndCli	lib/front_end_cli.cpp	/^void frontEndCli(textOp &file, istream &in) {$/;"	f
frontEndCurses	lib/front_end_curses.cpp	/^extern "C" void frontEndCurses(textOp &file) {$/;"	f
frontEndMain	lib/front_end_v1.cpp	/^frontEndMain(void) {$/;"	f
frontEndMain_V1	lib/front_end_v2.cpp	/^frontEndMain_V1(void) {$/;"	f
frontEndMain_V2	lib/front_end_v2.cpp	/^frontEndMain_V2(void) {$/;"	f
frontEnd_V1	lib/front_end_v2.cpp	/^void frontEnd_V1(textOp &file) {$/;"	f
frontEnd_V2	lib/front_end_v2.cpp	/^void frontEnd_V2(textOp &file) {$/;"	f
front_end_author	include/front_end.h	/^extern "C" const char *front_end_author;$/;"	v
front_end_author	lib/front_end_v1.cpp	/^const char *front_end_author = "Ruize Tang";$/;"	v
front_end_cli_author	lib/front_end_v2.cpp	/^const char *front_end_cli_author = "Ruize Tang";$/;"	v
front_end_cli_version	lib/front_end_v2.cpp	/^const char *front_end_cli_version = "CLI 0.1";$/;"	v
front_end_curses_author	lib/front_end_v2.cpp	/^const char *front_end_curses_author = "Cooooooooooooolest TRZ";$/;"	v
front_end_curses_version	lib/front_end_v2.cpp	/^const char *front_end_curses_version = "CURSES 1.1";$/;"	v
front_end_version	include/front_end.h	/^extern "C" const char *front_end_version;$/;"	v
front_end_version	lib/front_end_v1.cpp	/^const char *front_end_version = "CLI 0.1";$/;"	v
getCliInputFifoName	src/init.cpp	/^string getCliInputFifoName() {$/;"	f
getFilename	include/text.h	/^    string getFilename() const {$/;"	f	class:textOp
getHelp	lib/front_end_curses.cpp	/^void getHelp() {$/;"	f
getTotalChars	include/text.h	/^    int getTotalChars() const {$/;"	f	class:textOp
getTotalLines	include/text.h	/^    int getTotalLines() const {$/;"	f	class:textOp
gotoEditFileDir	src/init.cpp	/^int gotoEditFileDir() {$/;"	f
gotoLine	lib/front_end_curses.cpp	/^void gotoLine(pos_t *p = NULL) {$/;"	f
gotoOff	lib/front_end_curses.cpp	/^void gotoOff() {$/;"	f
gotoPos	lib/front_end_curses.cpp	/^void gotoPos(pos_t pos) {$/;"	f
gotoPosInput	lib/front_end_curses.cpp	/^int gotoPosInput(int type, pos_t *pos, uint64_t *off) {$/;"	f
goto_char_msgs	lib/front_end_curses.cpp	/^static status_t goto_char_msgs = {$/;"	v	file:
goto_line_msgs	lib/front_end_curses.cpp	/^static status_t goto_line_msgs = {$/;"	v	file:
hasBreakLine	include/text.h	/^    bool hasBreakLine() const {$/;"	f	class:textOp
hasMsgImm	lib/front_end_curses.cpp	/^static bool hasMsgImm = false;$/;"	v	file:
has_break_line	include/text.h	/^    bool has_break_line;$/;"	m	class:textOp
help_msgs	lib/front_end_curses.cpp	/^static status_t help_msgs = {$/;"	v	file:
inetAddressStr	lib/inet_sockets.cpp	/^inetAddressStr(const struct sockaddr *addr, socklen_t addrlen,$/;"	f
inetBind	lib/inet_sockets.cpp	/^inetBind(const char *service, int type, socklen_t *addrlen)$/;"	f
inetConnect	lib/inet_sockets.cpp	/^inetConnect(const char *host, const char *service, int type)$/;"	f
inetListen	lib/inet_sockets.cpp	/^inetListen(const char *service, int backlog, socklen_t *addrlen)$/;"	f
inetPassiveSocket	lib/inet_sockets.cpp	/^inetPassiveSocket(const char *service, int type, socklen_t *addrlen,$/;"	f	file:
init	src/init.cpp	/^void init() {$/;"	f
initCurses	lib/front_end_curses.cpp	/^void initCurses() {$/;"	f
insertChar	lib/front_end_curses.cpp	/^void insertChar(int ch) {$/;"	f
insertChar	src/text.cpp	/^prompt_t textOp::insertChar(pos_t pos, char c) {$/;"	f	class:textOp
insertChar	src/text_mutex.cpp	/^prompt_t textOpMutex::insertChar(pos_t pos, char c) {$/;"	f	class:textOpMutex
insertCharAt	src/text.cpp	/^prompt_t textOp::insertCharAt(uint64_t off, char c) {$/;"	f	class:textOp
insertCharAt	src/text_mutex.cpp	/^prompt_t textOpMutex::insertCharAt(uint64_t off, char c) {$/;"	f	class:textOpMutex
interp	lib/front_end_v1.cpp	/^static const char interp[] __attribute__((section(".interp"))) = INTERP;$/;"	v	file:
interp	lib/front_end_v2.cpp	/^static const char interp[] __attribute__((section(".interp"))) = INTERP;$/;"	v	file:
invalid_line	lib/front_end_curses.cpp	/^static status_t invalid_line = { "Invalid line or column number" };$/;"	v	file:
invalid_offset	lib/front_end_curses.cpp	/^static status_t invalid_offset = { "Invalid offset" };$/;"	v	file:
isModified	include/text.h	/^    bool isModified() const {$/;"	f	class:textOp
keyBackspace	lib/front_end_curses.cpp	/^void keyBackspace() {$/;"	f
keyDelete	lib/front_end_curses.cpp	/^void keyDelete() {$/;"	f
keyDown	lib/front_end_curses.cpp	/^void keyDown() {$/;"	f
keyEnd	lib/front_end_curses.cpp	/^void keyEnd() {$/;"	f
keyHome	lib/front_end_curses.cpp	/^void keyHome() {$/;"	f
keyLeft	lib/front_end_curses.cpp	/^void keyLeft() {$/;"	f
keyMouse	lib/front_end_curses.cpp	/^void keyMouse() {$/;"	f
keyRight	lib/front_end_curses.cpp	/^void keyRight() {$/;"	f
keyUp	lib/front_end_curses.cpp	/^void keyUp() {$/;"	f
line	include/text.h	/^    string line;$/;"	m	struct:linestruct
lineno	include/op.h	/^    int lineno;$/;"	m	struct:pos_t
linestruct	include/text.h	/^struct linestruct {$/;"	s
loadFile	src/text.cpp	/^prompt_t textOp::loadFile(const string &filename) {$/;"	f	class:textOp
locateLine	src/text.cpp	/^file_t::iterator textOp::locateLine(int no) {$/;"	f	class:textOp
lock_file	src/init.cpp	/^string lock_file;$/;"	v
main	server/dummy_server.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main_msgs	lib/front_end_curses.cpp	/^static status_t main_msgs = {$/;"	v	file:
main_thread_id	lib/front_end_v2.cpp	/^pthread_t main_thread_id;$/;"	v
makeFifo	src/init.cpp	/^int makeFifo(string &name) {$/;"	f
modified	include/text.h	/^    bool modified;$/;"	m	class:textOp
mtx	src/text_mutex.cpp	/^pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;$/;"	v
mvyDrawString	lib/front_end_curses.cpp	/^void mvyDrawString(int y, const string &line) {$/;"	f
new_file_flag	lib/front_end_curses.cpp	/^bool new_file_flag = false;$/;"	v
nextLine	lib/front_end_curses.cpp	/^void nextLine() {$/;"	f
nextPage	lib/front_end_curses.cpp	/^void nextPage() {$/;"	f
offset	include/op.h	/^    int offset;$/;"	m	struct:pos_t
old_cwd_fd	src/init.cpp	/^static int old_cwd_fd = -1;$/;"	v	file:
op	include/op.h	/^    op_t op;$/;"	m	struct:trans_t
op_in_feedback_read_fd	src/init.cpp	/^int op_in_feedback_read_fd = -1, op_in_feedback_write_fd = -1;$/;"	v
op_in_feedback_write_fd	src/init.cpp	/^int op_in_feedback_read_fd = -1, op_in_feedback_write_fd = -1;$/;"	v
op_in_read_fd	src/init.cpp	/^int op_in_read_fd = -1, op_in_write_fd = -1;$/;"	v
op_in_write_fd	src/init.cpp	/^int op_in_read_fd = -1, op_in_write_fd = -1;$/;"	v
op_input_feedback_fifo_name	src/init.cpp	/^string op_input_feedback_fifo_name;$/;"	v
op_input_fifo_name	src/init.cpp	/^string op_input_fifo_name;$/;"	v
op_output_fifo_name	src/init.cpp	/^string op_output_fifo_name;$/;"	v
op_read_fd	src/init.cpp	/^int op_read_fd = -1, op_write_fd = -1;$/;"	v
op_t	include/op.h	/^struct op_t {$/;"	s
op_write_fd	src/init.cpp	/^int op_read_fd = -1, op_write_fd = -1;$/;"	v
openFifos	src/init.cpp	/^int openFifos(string &name, int &readfd, int &writefd) {$/;"	f
operation	include/op.h	/^    int operation;$/;"	m	struct:op_t
out_file_prefix	src/init.cpp	/^string out_file_prefix;$/;"	v
out_file_prefix_no_pid	src/init.cpp	/^string out_file_prefix_no_pid = OUT_FILE_PREFIX;$/;"	v
over_write_msgs	lib/front_end_curses.cpp	/^static status_t over_write_msgs = {$/;"	v	file:
pos	include/op.h	/^        pos_t pos;$/;"	m	union:op_t::__anon2
pos_t	include/op.h	/^struct pos_t {$/;"	s
preLine	lib/front_end_curses.cpp	/^void preLine() {$/;"	f
prePage	lib/front_end_curses.cpp	/^void prePage() {$/;"	f
printBanner	lib/front_end_v2.cpp	/^void printBanner() {$/;"	f
printCurPos	lib/front_end_curses.cpp	/^void printCurPos() {$/;"	f
printLines	src/text.cpp	/^void textOp::printLines(int start, int count, bool lineno) {$/;"	f	class:textOp
prompt_t	include/error.h	/^typedef const string prompt_t;$/;"	t
ps	lib/front_end_cli.cpp	/^static string ps = DEFAULT_PS;$/;"	v	file:
readOpInFifo	src/init.cpp	/^int readOpInFifo(op_t &op) {$/;"	f
readOp_Thread	src/init.cpp	/^void *readOp_Thread(void *args) {$/;"	f
read_server_thread	src/init.cpp	/^void *read_server_thread(void *args) {$/;"	f
readn	lib/rdwrn.cpp	/^readn(int fd, void *buffer, size_t n)$/;"	f
readonly_flag	lib/front_end_curses.cpp	/^bool readonly_flag = false;$/;"	v
redirectStderr	src/init.cpp	/^void redirectStderr() {$/;"	f
redraw	lib/front_end_curses.cpp	/^prompt_t redraw(int type = RD_CONTENT, status_t *msgs = NULL)$/;"	f
redrawContent	lib/front_end_curses.cpp	/^void redrawContent() {$/;"	f
redrawCurLine	lib/front_end_curses.cpp	/^void redrawCurLine() {$/;"	f
redrawTitle	lib/front_end_curses.cpp	/^void redrawTitle() {$/;"	f
removeOutFileAtExit	src/init.cpp	/^void removeOutFileAtExit() {$/;"	f
reportWriteOpError	src/init.cpp	/^void reportWriteOpError(const op_t &op, int en) {$/;"	f
restoreOldCwd	src/init.cpp	/^int restoreOldCwd() {$/;"	f
saveDirFds	src/init.cpp	/^int saveDirFds() {$/;"	f
saveFile	src/text.cpp	/^prompt_t textOp::saveFile(const string &filename, $/;"	f	class:textOp
screen_line	lib/front_end_curses.cpp	/^int screen_line = TITLE_LINES, screen_line_offset = 0;$/;"	v
screen_line_offset	lib/front_end_curses.cpp	/^int screen_line = TITLE_LINES, screen_line_offset = 0;$/;"	v
screen_start_line	lib/front_end_curses.cpp	/^int screen_start_line = 1;$/;"	v
server	include/op.h	/^    int server;$/;"	m	struct:state_t
server_addr	src/main.cpp	/^string server_addr;$/;"	v
server_in_feedback_read_fd	src/init.cpp	/^int server_in_feedback_read_fd = -1, server_in_feedback_write_fd = -1;$/;"	v
server_in_feedback_write_fd	src/init.cpp	/^int server_in_feedback_read_fd = -1, server_in_feedback_write_fd = -1;$/;"	v
server_in_read_fd	src/init.cpp	/^int server_in_read_fd = -1, server_in_write_fd = -1;$/;"	v
server_in_write_fd	src/init.cpp	/^int server_in_read_fd = -1, server_in_write_fd = -1;$/;"	v
server_out_read_fd	src/init.cpp	/^int server_out_read_fd = -1, server_out_write_fd = -1;$/;"	v
server_out_write_fd	src/init.cpp	/^int server_out_read_fd = -1, server_out_write_fd = -1;$/;"	v
setFilename	include/text.h	/^    void setFilename(const string &filename) {$/;"	f	class:textOp
setModified	include/text.h	/^    void setModified() {$/;"	f	class:textOp
setOutFilenames	src/init.cpp	/^void setOutFilenames() {$/;"	f
setTitleModifiedFlag	lib/front_end_curses.cpp	/^void setTitleModifiedFlag() {$/;"	f
shellPrompt	lib/front_end_cli.cpp	/^static inline void shellPrompt() {$/;"	f	file:
socket_fd	src/init.cpp	/^int socket_fd = -1;$/;"	v
state	include/op.h	/^    state_t state;$/;"	m	struct:trans_t
state_t	include/op.h	/^struct state_t {$/;"	s
status_t	lib/front_end_curses.cpp	/^typedef const vector<const char *> status_t;$/;"	t	file:
sure_append	lib/front_end_curses.cpp	/^static status_t sure_append = {$/;"	v	file:
sure_prepend	lib/front_end_curses.cpp	/^static status_t sure_prepend = {$/;"	v	file:
suspendEditor	lib/front_end_curses.cpp	/^void suspendEditor() {$/;"	f
textOp	include/text.h	/^class textOp {$/;"	c
textOp	src/text.cpp	/^textOp::textOp(const string &filename) {$/;"	f	class:textOp
textOpMutex	include/text_mutex.h	/^class textOpMutex: public textOp$/;"	c
to_server_feedback_fifo_name	src/init.cpp	/^string to_server_feedback_fifo_name;$/;"	v
to_server_fifo_name	src/init.cpp	/^string to_server_fifo_name;$/;"	v
total_chars	include/text.h	/^    uint64_t total_chars;$/;"	m	class:textOp
trans_t	include/op.h	/^struct trans_t {$/;"	s
translateOffset	src/text.cpp	/^pos_t textOp::translateOffset(uint64_t offset) {$/;"	f	class:textOp
translatePos	src/text.cpp	/^uint64_t textOp::translatePos(const pos_t pos) {$/;"	f	class:textOp
unimplemented	lib/front_end_curses.cpp	/^static status_t unimplemented = { "Unimplemented" };$/;"	v	file:
unknown_command	lib/front_end_curses.cpp	/^static status_t unknown_command = { "Unknown command" };$/;"	v	file:
updateCursor	lib/front_end_curses.cpp	/^void updateCursor() {$/;"	f
version	lib/front_end_v2.cpp	/^static char version[PAD_SIZE] = {0};$/;"	v	file:
whereIs	lib/front_end_curses.cpp	/^void whereIs() {$/;"	f
writeAndShowMsg	lib/front_end_curses.cpp	/^int writeAndShowMsg(const string &s, const string &write_mode,$/;"	f
writeOpFifo	src/init.cpp	/^void writeOpFifo(const op_t &op) {$/;"	f
writeOut	lib/front_end_curses.cpp	/^int writeOut() {$/;"	f
write_append	lib/front_end_curses.cpp	/^const char *write_append = "File Name to Append to";$/;"	v
write_cand	lib/front_end_curses.cpp	/^char write_cand[PATH_MAX] = {0};$/;"	v
write_only	lib/front_end_curses.cpp	/^const char *write_only = "File Name to Write";$/;"	v
write_op	lib/front_end_v1.cpp	/^int write_op = 1;$/;"	v
write_op	lib/front_end_v2.cpp	/^int write_op = 0;$/;"	v
write_op_pos	lib/front_end_v2.cpp	/^int write_op_pos = 0;$/;"	v
write_out_msgs	lib/front_end_curses.cpp	/^static status_t write_out_msgs = {$/;"	v	file:
write_prepend	lib/front_end_curses.cpp	/^const char *write_prepend = "File Name to Prepend to";$/;"	v
write_server_thread	src/init.cpp	/^void *write_server_thread(void *args) {$/;"	f
write_str	lib/front_end_curses.cpp	/^char write_str[40] = "File Name to Write:";$/;"	v
writen	lib/rdwrn.cpp	/^writen(int fd, const void *buffer, size_t n)$/;"	f
